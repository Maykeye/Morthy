:i "generic-x86-64.morth"

:$ type ( ptr len -- ) [
    1 ( stdout )
    1 ( write ) ->rax ( syscall )
    ->rdi ( stdout )
    ->rdx ( length )
    ->rsi ( buffer )
    syscall
]

:$ emit ( c -- ) [
    :.text "mov rax, 1"
    :.text "mov rdi, 1"
    :.text "mov rdx, 1"
    :.text "mov rsi, rsp"
    syscall
    :.text "pop rax"

]

:$ key ( -- char-from-stdin-u64 ) [
    0 read-char
]

:$ read-char ( fd -- char-from-fd ) [
    ->rdi
    0
    0->rax
    rsp->rsi
    :.text "mov rdx, 1"
    syscall
]
:$ STDIN_FILENO [ 0 ]
:$ read-buffer ( addr n fd -- n ) [
    ->rdi ->rdx ->rsi 0->rax
        syscall 
    <-rax
]


:$ :prologue [
    :.text "BITS 64"
    :.text "SECTION .text"
    :.text "GLOBAL _start"
    :.text "_start:"
    :.text "mov qword [_callstack], _start_hlt"
    :.text "mov qword [_locals_ptr], _locals"
    :.text "mov qword [_locals_ptr+8], _locals"
    :.text `call {LIT}`
    :.text "_start_hlt:"
    :.text "hlt"
    :do_pop

    :.data ""
    :.data "SECTION .data"
    :.data "_callstack_top_ptr: dq _callstack"
    :.data "_locals_top_ptr: dq _locals_ptr "

    :.bss ""
    :.bss "SECTION .bss"
    :.bss "_callstack: resq 8192"
    :.bss "_locals:    resq 16384"
    :.bss "_locals_ptr: resq 8192"
]



:$ syscall1-r (arg1 syscallN -- res) [
    ->rax ->rdi
    syscall <-rax
]

:$ syscall1 (arg1 syscallN -- ) [
    ->rax ->rdi
    syscall
]

:$ exit (n -- noreturn ) [ 60 syscall1 ]


:$ syscall-brk [ 12 syscall1-r ]
