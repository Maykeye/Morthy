# Verbs:

## Debug
* sentinel!
    Assume that next push to the stack happens to address at N,
    sentinel! puts integer (C+N) to stack,
    where C is implementation defined.

    It's needed as if stack sits around 0x10, random data 0x10
    can be mistaked for sentinel later

* sentinel@
    assume that next pop happens at address N,
    the verb will pops the value and check if it's equal to C+N
    if it is, continues as normal.
    Otherwise implementation defined crash happens

## Relational operation
In all of these operation the result is either 0(false) or 1(true)
* =, !=
    Equality, inequality
* &lt;, &gt;
    Signed comparison

## Binary operations

* shr (a n -- a>>n)
    Pops two values (`n` then `a`), shifts `a` right by `n` bits,
    leaving last bit zero. Then the result is pushed to the stack.

## I/O
* hex-digit (n -- ch)
    takes last 4 bits of the number and converts them
    to human-readable character represention

* emitXX (n -- )
    Pops a value and prints its least-significant byte in human-readable form. Byte is always printed using two characters, i.e. leading zero is not truncated.

* emitXXXX (n -- )
    Pops a value and prints its least-significant 2-byte word in human-readable form. Word is always printed using four characters, i.e. leading zero is not truncated.

## Shorthands

* 1+ increase top of the stack by 1
* 1- decrease top of the stack by 1
* 1shr shift top of the stack by 1 bit.

##
System:

* exit (n -- noreturn) exit

    terminates the program, returning n as the error code.
    UB: If stack is not balanced.

